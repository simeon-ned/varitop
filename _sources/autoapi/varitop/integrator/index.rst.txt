:py:mod:`varitop.integrator`
============================

.. py:module:: varitop.integrator

.. autoapi-nested-parse::

   Integrators



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   varitop.integrator.VariationalIntegrator
   varitop.integrator.DelIntegrator
   varitop.integrator.DelmIntegrator




.. py:class:: VariationalIntegrator


   Abstract variational integrator class

   .. py:property:: free
      :type: bool

      Determines if body is free-floating


   .. py:property:: lagrangian
      :type: casadi.Function

      System's continuous lagrangian


   .. py:property:: rule
      :type: casadi.Function

      Midpoint rule


   .. py:property:: nq
      :type: int

      Number of generalized coordinates


   .. py:property:: nu
      :type: int

      Number of controls


   .. py:method:: _discrete_lagrangian() -> casadi.Function

      Discretization of system's lagrangian

      :return: Ld(q0, q1, h)
      :rtype: casadi.Function


   .. py:method:: step()
      :abstractmethod:

      Given the state of the system, generate the residual


   .. py:method:: _append_generalized_force(force: casadi.Function)

      Compose a generalized force

      :param force: force to generalize and add
      :type force: casadi.Function


   .. py:method:: add_generalized_forces(forces: List[casadi.Function])

      Wrapper for forces lists

      :param forces: A list of forces
      :type forces: List[casadi.Function]


   .. py:method:: _append_dynamics_constraint(constr: casadi.Function)

      Add phi(q) for constrained dynamics

      :param constr: constraint residual
      :type constr: casadi.Function


   .. py:method:: add_dynamics_constraints(constraints: List[casadi.Function])

      Wrapper for constraints lists

      :param constraints: A list of constraints
      :type constraints: List[casadi.Function]



.. py:class:: DelIntegrator


   Bases: :py:obj:`VariationalIntegrator`

   Discrete Euler-Lagrange integrator

   .. py:method:: step()

      (q0, q1) -> (q1, q2)



.. py:class:: DelmIntegrator


   Bases: :py:obj:`VariationalIntegrator`

   Discrete Euler-Lagrange in Momentum form

   .. py:method:: step()
      :abstractmethod:

      (q0, p0) -> (q1, p1)



